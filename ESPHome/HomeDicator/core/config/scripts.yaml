script:
  - id: update_time
    then:
      - if:
          condition:
            lambda: 'return id(use_24h_clock);'
          then:
            - lvgl.label.update:
                id: lvgl_current_time
                text: 
                  format: "%02d:%02d"
                  args: [ 'id(homeassistant_time).now().hour', 'id(homeassistant_time).now().minute' ]
          else:
            - lvgl.label.update:
                id: lvgl_current_time
                text: !lambda |-
                  auto now = id(homeassistant_time).now();
                  int hour = now.hour % 12 == 0 ? 12 : now.hour % 12;
                  auto am_pm = now.hour >= 12 ? "PM" : "AM";
                  static char time_text[10];
                  snprintf(time_text, sizeof(time_text), "%d:%02d %s", hour, now.minute, am_pm);
                  return time_text;
  
            
  - id: create_pager_dots
    then:
      - lambda: |-
          for (int i = 0; i < ${total_pages}; i++) {
            auto dot = lv_obj_create(id(bottom_pager));  // Create each dot object
            lv_obj_set_size(dot, 8, 8);  // Set width and height of the dot (8x8)
            lv_obj_set_style_radius(dot, 4, LV_PART_MAIN);  // Set radius to make it circular
            lv_obj_set_style_bg_color(dot, (i == 0) ? lv_color_hex(0xffffff) : lv_color_hex(0x626262), LV_PART_MAIN);  // Set color based on active/inactive
            lv_obj_set_style_bg_opa(dot, LV_OPA_COVER, LV_PART_MAIN);  // Ensure the background is fully opaque
            lv_obj_set_style_border_width(dot, 0, LV_PART_MAIN);  // Disable borders
            lv_obj_set_style_border_color(dot, lv_color_hex(0x000000), LV_PART_MAIN);  // Set border color to black (doesn't matter since width is 0)
            id(pager_dots)[i] = dot;  // Store the dot reference
          }
  
  - id: next_page
    then:
      - globals.set:
          id: current_page
          value: !lambda |-
            int next_page = id(current_page) + 1;
            return (next_page >= ${total_pages}) ? 0 : next_page;  // Loop back to 0 if exceeding the total pages
      - lvgl.page.next:
          animation: MOVE_LEFT
          time: 150ms
      - lambda: |-
          for (int i = 0; i < ${total_pages}; i++) {
            lv_obj_t* dot = id(pager_dots)[i];
            lv_obj_set_style_bg_color(dot, (i == id(current_page)) ? lv_color_hex(0xffffff) : lv_color_hex(0x626262), LV_PART_MAIN);  // Active color is white, inactive is gray
          }
  
  - id: previous_page
    then:
      - globals.set:
          id: current_page
          value: !lambda |-
            int prev_page = id(current_page) - 1;
            return (prev_page < 0) ? ${total_pages} - 1 : prev_page;  // Loop back to max page if going below 0
      - lvgl.page.previous:
          animation: MOVE_RIGHT
          time: 150ms
      - lambda: |-
          for (int i = 0; i < ${total_pages}; i++) {
            lv_obj_t* dot = id(pager_dots)[i];
            lv_obj_set_style_bg_color(dot, (i == id(current_page)) ? lv_color_hex(0xffffff) : lv_color_hex(0x626262), LV_PART_MAIN);  // Active color is white, inactive is gray
          }
  
  - id: activity_timeout_reached
    then:
      - if:
          condition:
            and:
              - lambda: |-
                  return id(turn_off_screen_after_value) != 0;
              - not:
                  lvgl.is_paused
          then:
            - logger.log: "LVGL pausing - enabling snow for burn-in prevention"
            - light.turn_off: indicator_display_backlight
            - delay: 200ms
            - lvgl.pause:
                show_snow: true
              
  - id: activity_detected
    then:
      if:
        condition: lvgl.is_paused
        then:
          - logger.log: "User interacted - LVGL resuming"
          - lvgl.resume:
          - lvgl.widget.redraw:
          - delay: 200ms
          - light.turn_on: indicator_display_backlight